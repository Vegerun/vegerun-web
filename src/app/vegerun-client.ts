/* tslint: disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v7.7.6173.30627 (NJsonSchema v5.19.6171.28316) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/Rx'; 
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

export interface IVegerunClient {
    /**
     * @return Success
     */
    apiV1AccountListGet(): Observable<void>;
    /**
     * @return Success
     */
    apiV1AccountUpdateUserPost(update: UserUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1AccountUpdatePasswordPost(update: PasswordUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1CustomersLocationSubscriptionsListByUserIdGet(userId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1CustomersLocationSubscriptionsGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1CustomersLocationSubscriptionsCreatePost(create: CustomerLocationSubscriptionCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1CustomersLocationSubscriptionsCreateAnonymousPost(create: CustomerLocationAnonymousSubscriptionCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1CustomersLocationSubscriptionsDeleteByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1CustomersAddressListByUserIdGet(userId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1CustomersAddressGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1CustomersAddressCreatePost(create: CustomerPostalAddressCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1CustomersAddressDeleteByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1CustomersRegisterPost(request: CustomerRegistrationRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1DeliveriesGetByOrderIdGet(orderId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1DeliveriesListManualAllocationsGet(): Observable<void>;
    /**
     * @return Success
     */
    apiV1DeliveriesAssigningAssignPost(request: DeliveryAssignRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1DeliveriesAssigningUnassignByOrderIdPost(orderId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1DeliveriesProcessingAllocatePost(create: DeliveryAllocationCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1DeliveriesProcessingWaitPost(create: DeliveryRestaurantArrivalCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1DeliveriesProcessingDispatchPost(create: DeliveryDispatchmentCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1DeliveriesProcessingArrivePost(create: DeliveryCustomerArrivalCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1DeliveriesProcessingCompletePost(create: DeliveryCompletionCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1ContactRestaurantInterestPost(create: RestaurantRegisterInterestCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1ContactCustomerInterestPost(create: CustomerRegisterInterestCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsGetByPostcodeGet(postcode: string): Observable<LocationResult>;
    /**
     * @return Success
     */
    apiV1LocationsAvailabilityGetByLocationIdGet(locationId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsAvailabilityListGet(): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleClosuresGetByLocationIdGet(locationId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleClosuresUpdatePost(update: LocationClosureUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleClosuresClearPost(locationId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsGetGet(): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsSelectByDeliveryPartnerNamePost(deliveryPartnerName: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsRemovePost(): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleShiftListByLocationIdGet(locationId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleShiftGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleShiftCreatePost(create: LocationShiftCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleShiftUpdatePost(update: LocationShiftUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleShiftDeleteByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusGetByRestaurantByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionAddSectionPost(create: MenuSectionSelectionCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionAddItemPost(create: MenuItemSelectionCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionAddOptionPost(create: MenuOptionSelectionCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionDeleteSectionByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionDeleteItemByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionDeleteOptionByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionOrderSectionsPost(request: MenuOrderRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionOrderItemsPost(request: MenuOrderRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionOrderOptionsPost(request: MenuOrderRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionAddFeaturedItemByItemIdPost(itemId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCompositionRemoveFeaturedItemByItemIdPost(itemId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsListByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsCreatePost(create: MenuItemCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsUpdatePost(update: MenuItemUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsDiscardByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsUploadImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsDeleteImageByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsProposeByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsApproveByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsDeclineByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusItemsConfirmByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusGetComponentsByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusGetComponentsForManageByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusListByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusListItemsByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusCreatePost(create: MenuCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusPublishByMenuIdPost(menuId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusEnableItemByMenuItemIdPost(menuItemId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusDisableItemByMenuItemIdPost(menuItemId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusSectionListByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusSectionGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusSectionCreatePost(create: MenuSectionCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusSectionUpdatePost(update: MenuSectionUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusSectionDiscardByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusSectionProposeByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusSectionApproveByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusSectionDeclineByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1MenusSectionConfirmByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1NotificationsOrderAlertsMutePost(request: OrderAlertMuteRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersListByUserIdGet(userId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersGetByIdGet(id: string): Observable<OrderResult>;
    /**
     * @return Success
     */
    apiV1OrdersListRestaurantOrdersByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersListRestaurantByRestaurantIdGet(restaurantId: string): Observable<OrderResultV2[]>;
    /**
     * @return Success
     */
    apiV1OrdersListActiveGet(): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersListActiveV2Get(): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersCreatePost(create: OrderCreate): Observable<OrderResult>;
    /**
     * @return Success
     */
    apiV1OrdersDeleteByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersItemsListByOrderIdGet(orderId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersItemsGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersItemsCreatePost(create: OrderItemCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersItemsUpdatePost(update: OrderItemUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersItemsDeleteByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersProcessingPlaceOrderPost(request: OrderPlacementRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersProcessingValidateOrderPlaceableByOrderIdPost(orderId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersProcessingAcceptOrderPost(request: OrderAcceptanceRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersProcessingRejectOrderPost(request: OrderRejectionRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1OrdersProcessingProduceOrderPost(request: OrderProductionRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsListGet(): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsGetBySlugBySlugGet(slug: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsCreatePost(create: RestaurantCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsUpdatePost(update: RestaurantUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsGetDashboardBySlugGet(slug: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsAvailabilityGetByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsAvailabilityGetPublicByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsAvailabilityGetUnavailabilityStatusesByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsCategoriesListByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsCategoriesGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsCategoriesCreatePost(create: RestaurantCategoryCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsCategoriesDeleteByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientGetByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientEnableWebByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientDisableWebByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientCreateSmsClientPost(create: RestaurantSmsClientCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientDeleteSmsClientBySmsClientIdPost(smsClientId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientActivateSmsClientBySmsClientIdPost(smsClientId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientDeactivateSmsClientBySmsClientIdPost(smsClientId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientPromoteSmsClientBySmsClientIdPost(smsClientId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientRemovePromotedSmsClientByRestaurantIdPost(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientTestSmsClientBySmsClientIdPost(smsClientId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsHeartbeatPost(): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsHeartbeatByRestaurantIdPost(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsHeartbeatGetByRestaurantIdPost(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsHeartbeatSetPost(update: RestaurantHeartbeatModeUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsImagesUploadLogoImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsImagesUploadSearchImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsImagesUploadFeaturedImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsImagesUploadLocationImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsImagesDeleteLogoImageByRestaurantIdPost(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsImagesDeleteSearchImageByRestaurantIdPost(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsImagesDeleteFeaturedImageByRestaurantIdPost(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsImagesDeleteLocationImageByRestaurantIdPost(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsRegistrationInvitePost(create: RestaurantManagerInvitationCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsRegistrationGetInvitationByRestaurantByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsRegistrationRegisterPost(request: RestaurantRegistrationRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsOrderGetByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsOrderOrderValuesUpdatePost(update: RestaurantOrderValueUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsOrderOrderRateLimitUpdatePost(update: RestaurantOrderRateLimitUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsOrderOrderRateLimitSelectPost(selection: RestaurantOrderRateLimitSelection): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsOrderOrderRateLimitRemoveByRestaurantIdPost(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSearchSearchPost(request: RestaurantSearchRequest): Observable<RestaurantSearchResult>;
    /**
     * @return Success
     */
    apiV1RestaurantsSearchGetRestaurantSearchResultPost(request: RestaurantSearchItemRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsGetByRestaurantIdGet(restaurantId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsUpdateDeliveriesPost(update: RestaurantDeliverySettingsUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1RestaurantsSettingsUpdateSchedulesPost(update: RestaurantScheduleSettingsUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1AccountRolesAddPost(addition: RoleAddition): Observable<void>;
    /**
     * @return Success
     */
    apiV1AccountRolesRemovePost(removal: RoleRemoval): Observable<void>;
    /**
     * @return Success
     */
    apiV1AccountSessionLoginPost(request: LoginRequest): Observable<void>;
    /**
     * @return Success
     */
    apiV1AccountSessionLogoutPost(): Observable<void>;
    /**
     * @return Success
     */
    apiV1PaymentStripeCardsCreatePost(create: StripeCardCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1PaymentStripeCardsListByUserIdGet(userId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1PaymentStripeCardsDeleteByIdPost(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1PaymentStripeCustomersGetByUserIdGet(userId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1PaymentStripeCustomersCreatePost(create: StripeCustomerCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsTownsListGet(): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsTownsListAdministratorGet(): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsTownsGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsTownsGetDetailsByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsTownsCreatePost(create: TownCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsTownsUpdatePost(update: TownUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsDistrictsListByTownIdGet(townId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsDistrictsGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsDistrictsCreatePost(create: TownDistrictCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsDistrictsUpdatePost(update: TownDistrictUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSuburbsListByTownIdGet(townId: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSuburbsGetByIdGet(id: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSuburbsRandomGet(): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSuburbsRandomByCountGet(count: number): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSuburbsCreatePost(create: TownSuburbCreate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSuburbsUpdatePost(update: TownSuburbUpdate): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSuburbsUploadImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void>;
    /**
     * @return Success
     */
    apiV1LocationsSuburbsDeleteImageByIdPost(id: string): Observable<void>;
}

@Injectable()
export class VegerunClient implements IVegerunClient {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    apiV1AccountListGet(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/account/list";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1AccountListGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1AccountListGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1AccountListGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1AccountUpdateUserPost(update: UserUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/account/update-user";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1AccountUpdateUserPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1AccountUpdateUserPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1AccountUpdateUserPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1AccountUpdatePasswordPost(update: PasswordUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/account/update-password";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1AccountUpdatePasswordPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1AccountUpdatePasswordPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1AccountUpdatePasswordPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1CustomersLocationSubscriptionsListByUserIdGet(userId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/customers/location-subscriptions/list/{userId}"; 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1CustomersLocationSubscriptionsListByUserIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1CustomersLocationSubscriptionsListByUserIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1CustomersLocationSubscriptionsListByUserIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1CustomersLocationSubscriptionsGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/customers/location-subscriptions/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1CustomersLocationSubscriptionsGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1CustomersLocationSubscriptionsGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1CustomersLocationSubscriptionsGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1CustomersLocationSubscriptionsCreatePost(create: CustomerLocationSubscriptionCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/customers/location-subscriptions/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1CustomersLocationSubscriptionsCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1CustomersLocationSubscriptionsCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1CustomersLocationSubscriptionsCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1CustomersLocationSubscriptionsCreateAnonymousPost(create: CustomerLocationAnonymousSubscriptionCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/customers/location-subscriptions/create-anonymous";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1CustomersLocationSubscriptionsCreateAnonymousPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1CustomersLocationSubscriptionsCreateAnonymousPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1CustomersLocationSubscriptionsCreateAnonymousPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1CustomersLocationSubscriptionsDeleteByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/customers/location-subscriptions/delete/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1CustomersLocationSubscriptionsDeleteByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1CustomersLocationSubscriptionsDeleteByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1CustomersLocationSubscriptionsDeleteByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1CustomersAddressListByUserIdGet(userId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/customers/address/list/{userId}"; 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1CustomersAddressListByUserIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1CustomersAddressListByUserIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1CustomersAddressListByUserIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1CustomersAddressGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/customers/address/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1CustomersAddressGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1CustomersAddressGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1CustomersAddressGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1CustomersAddressCreatePost(create: CustomerPostalAddressCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/customers/address/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1CustomersAddressCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1CustomersAddressCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1CustomersAddressCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1CustomersAddressDeleteByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/customers/address/delete/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1CustomersAddressDeleteByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1CustomersAddressDeleteByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1CustomersAddressDeleteByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1CustomersRegisterPost(request: CustomerRegistrationRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/customers/register";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1CustomersRegisterPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1CustomersRegisterPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1CustomersRegisterPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1DeliveriesGetByOrderIdGet(orderId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/deliveries/get/{orderId}"; 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1DeliveriesGetByOrderIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1DeliveriesGetByOrderIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1DeliveriesGetByOrderIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1DeliveriesListManualAllocationsGet(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/deliveries/list-manual-allocations";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1DeliveriesListManualAllocationsGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1DeliveriesListManualAllocationsGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1DeliveriesListManualAllocationsGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1DeliveriesAssigningAssignPost(request: DeliveryAssignRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/deliveries/assigning/assign";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1DeliveriesAssigningAssignPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1DeliveriesAssigningAssignPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1DeliveriesAssigningAssignPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1DeliveriesAssigningUnassignByOrderIdPost(orderId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/deliveries/assigning/unassign/{orderId}"; 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1DeliveriesAssigningUnassignByOrderIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1DeliveriesAssigningUnassignByOrderIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1DeliveriesAssigningUnassignByOrderIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1DeliveriesProcessingAllocatePost(create: DeliveryAllocationCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/deliveries/processing/allocate";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1DeliveriesProcessingAllocatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1DeliveriesProcessingAllocatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1DeliveriesProcessingAllocatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1DeliveriesProcessingWaitPost(create: DeliveryRestaurantArrivalCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/deliveries/processing/wait";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1DeliveriesProcessingWaitPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1DeliveriesProcessingWaitPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1DeliveriesProcessingWaitPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1DeliveriesProcessingDispatchPost(create: DeliveryDispatchmentCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/deliveries/processing/dispatch";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1DeliveriesProcessingDispatchPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1DeliveriesProcessingDispatchPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1DeliveriesProcessingDispatchPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1DeliveriesProcessingArrivePost(create: DeliveryCustomerArrivalCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/deliveries/processing/arrive";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1DeliveriesProcessingArrivePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1DeliveriesProcessingArrivePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1DeliveriesProcessingArrivePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1DeliveriesProcessingCompletePost(create: DeliveryCompletionCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/deliveries/processing/complete";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1DeliveriesProcessingCompletePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1DeliveriesProcessingCompletePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1DeliveriesProcessingCompletePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1ContactRestaurantInterestPost(create: RestaurantRegisterInterestCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/contact/restaurant-interest";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1ContactRestaurantInterestPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1ContactRestaurantInterestPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1ContactRestaurantInterestPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1ContactCustomerInterestPost(create: CustomerRegisterInterestCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/contact/customer-interest";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1ContactCustomerInterestPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1ContactCustomerInterestPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1ContactCustomerInterestPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsGetByPostcodeGet(postcode: string): Observable<LocationResult> {
        let url_ = this.baseUrl + "/api/v1/locations/get/{postcode}"; 
        if (postcode === undefined || postcode === null)
            throw new Error("The parameter 'postcode' must be defined.");
        url_ = url_.replace("{postcode}", encodeURIComponent("" + postcode));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsGetByPostcodeGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsGetByPostcodeGet(response));
                } catch (e) {
                    return <Observable<LocationResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<LocationResult>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsGetByPostcodeGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
            let result200: LocationResult = null; 
            result200 = data === "" ? null : <LocationResult>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsAvailabilityGetByLocationIdGet(locationId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/availability/get/{locationId}"; 
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsAvailabilityGetByLocationIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsAvailabilityGetByLocationIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsAvailabilityGetByLocationIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsAvailabilityListGet(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/availability/list";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsAvailabilityListGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsAvailabilityListGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsAvailabilityListGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleClosuresGetByLocationIdGet(locationId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/schedule/closures/get/{locationId}"; 
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsScheduleClosuresGetByLocationIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsScheduleClosuresGetByLocationIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsScheduleClosuresGetByLocationIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleClosuresUpdatePost(update: LocationClosureUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/schedule/closures/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsScheduleClosuresUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsScheduleClosuresUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsScheduleClosuresUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleClosuresClearPost(locationId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/schedule/closures/clear?"; 
        if (locationId !== undefined)
            url_ += "locationId=" + encodeURIComponent("" + locationId) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsScheduleClosuresClearPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsScheduleClosuresClearPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsScheduleClosuresClearPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsGetGet(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/get";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsGetGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsGetGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsGetGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsSelectByDeliveryPartnerNamePost(deliveryPartnerName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/select/{deliveryPartnerName}"; 
        if (deliveryPartnerName === undefined || deliveryPartnerName === null)
            throw new Error("The parameter 'deliveryPartnerName' must be defined.");
        url_ = url_.replace("{deliveryPartnerName}", encodeURIComponent("" + deliveryPartnerName));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsSelectByDeliveryPartnerNamePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsSelectByDeliveryPartnerNamePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsSelectByDeliveryPartnerNamePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsRemovePost(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/remove";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsRemovePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsRemovePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsRemovePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleShiftListByLocationIdGet(locationId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/schedule/shift/list/{locationId}"; 
        if (locationId === undefined || locationId === null)
            throw new Error("The parameter 'locationId' must be defined.");
        url_ = url_.replace("{locationId}", encodeURIComponent("" + locationId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsScheduleShiftListByLocationIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsScheduleShiftListByLocationIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsScheduleShiftListByLocationIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleShiftGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/schedule/shift/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsScheduleShiftGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsScheduleShiftGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsScheduleShiftGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleShiftCreatePost(create: LocationShiftCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/schedule/shift/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsScheduleShiftCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsScheduleShiftCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsScheduleShiftCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleShiftUpdatePost(update: LocationShiftUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/schedule/shift/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsScheduleShiftUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsScheduleShiftUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsScheduleShiftUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSettingsScheduleShiftDeleteByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/settings/schedule/shift/delete/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSettingsScheduleShiftDeleteByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSettingsScheduleShiftDeleteByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSettingsScheduleShiftDeleteByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusGetByRestaurantByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/get-by-restaurant/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusGetByRestaurantByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusGetByRestaurantByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusGetByRestaurantByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionAddSectionPost(create: MenuSectionSelectionCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/add-section";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionAddSectionPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionAddSectionPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionAddSectionPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionAddItemPost(create: MenuItemSelectionCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/add-item";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionAddItemPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionAddItemPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionAddItemPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionAddOptionPost(create: MenuOptionSelectionCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/add-option";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionAddOptionPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionAddOptionPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionAddOptionPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionDeleteSectionByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/delete-section/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionDeleteSectionByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionDeleteSectionByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionDeleteSectionByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionDeleteItemByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/delete-item/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionDeleteItemByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionDeleteItemByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionDeleteItemByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionDeleteOptionByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/delete-option/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionDeleteOptionByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionDeleteOptionByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionDeleteOptionByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionOrderSectionsPost(request: MenuOrderRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/order-sections";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionOrderSectionsPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionOrderSectionsPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionOrderSectionsPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionOrderItemsPost(request: MenuOrderRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/order-items";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionOrderItemsPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionOrderItemsPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionOrderItemsPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionOrderOptionsPost(request: MenuOrderRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/order-options";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionOrderOptionsPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionOrderOptionsPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionOrderOptionsPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionAddFeaturedItemByItemIdPost(itemId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/add-featured-item/{itemId}"; 
        if (itemId === undefined || itemId === null)
            throw new Error("The parameter 'itemId' must be defined.");
        url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionAddFeaturedItemByItemIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionAddFeaturedItemByItemIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionAddFeaturedItemByItemIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCompositionRemoveFeaturedItemByItemIdPost(itemId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/composition/remove-featured-item/{itemId}"; 
        if (itemId === undefined || itemId === null)
            throw new Error("The parameter 'itemId' must be defined.");
        url_ = url_.replace("{itemId}", encodeURIComponent("" + itemId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCompositionRemoveFeaturedItemByItemIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCompositionRemoveFeaturedItemByItemIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCompositionRemoveFeaturedItemByItemIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsListByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/list/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsListByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsListByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsListByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsCreatePost(create: MenuItemCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsUpdatePost(update: MenuItemUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsDiscardByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/discard/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsDiscardByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsDiscardByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsDiscardByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsUploadImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/upload-image?"; 
        if (entityId !== undefined)
            url_ += "EntityId=" + encodeURIComponent("" + entityId) + "&"; 
        if (image_ContentType !== undefined)
            url_ += "Image.ContentType=" + encodeURIComponent("" + image_ContentType) + "&"; 
        if (image_ContentDisposition !== undefined)
            url_ += "Image.ContentDisposition=" + encodeURIComponent("" + image_ContentDisposition) + "&"; 
        if (image_Headers !== undefined)
            url_ += "Image.Headers=" + encodeURIComponent("" + image_Headers) + "&"; 
        if (image_Length !== undefined)
            url_ += "Image.Length=" + encodeURIComponent("" + image_Length) + "&"; 
        if (image_Name !== undefined)
            url_ += "Image.Name=" + encodeURIComponent("" + image_Name) + "&"; 
        if (image_FileName !== undefined)
            url_ += "Image.FileName=" + encodeURIComponent("" + image_FileName) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsUploadImagePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsUploadImagePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsUploadImagePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsDeleteImageByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/delete-image/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsDeleteImageByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsDeleteImageByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsDeleteImageByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsProposeByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/propose/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsProposeByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsProposeByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsProposeByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsApproveByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/approve/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsApproveByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsApproveByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsApproveByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsDeclineByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/decline/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsDeclineByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsDeclineByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsDeclineByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusItemsConfirmByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/items/confirm/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusItemsConfirmByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusItemsConfirmByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusItemsConfirmByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusGetComponentsByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/get-components/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusGetComponentsByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusGetComponentsByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusGetComponentsByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusGetComponentsForManageByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/get-components-for-manage/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusGetComponentsForManageByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusGetComponentsForManageByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusGetComponentsForManageByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusListByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/list/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusListByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusListByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusListByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusListItemsByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/list-items/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusListItemsByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusListItemsByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusListItemsByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusCreatePost(create: MenuCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusPublishByMenuIdPost(menuId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/publish/{menuId}"; 
        if (menuId === undefined || menuId === null)
            throw new Error("The parameter 'menuId' must be defined.");
        url_ = url_.replace("{menuId}", encodeURIComponent("" + menuId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusPublishByMenuIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusPublishByMenuIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusPublishByMenuIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusEnableItemByMenuItemIdPost(menuItemId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/enable-item/{menuItemId}"; 
        if (menuItemId === undefined || menuItemId === null)
            throw new Error("The parameter 'menuItemId' must be defined.");
        url_ = url_.replace("{menuItemId}", encodeURIComponent("" + menuItemId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusEnableItemByMenuItemIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusEnableItemByMenuItemIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusEnableItemByMenuItemIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusDisableItemByMenuItemIdPost(menuItemId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/disable-item/{menuItemId}"; 
        if (menuItemId === undefined || menuItemId === null)
            throw new Error("The parameter 'menuItemId' must be defined.");
        url_ = url_.replace("{menuItemId}", encodeURIComponent("" + menuItemId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusDisableItemByMenuItemIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusDisableItemByMenuItemIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusDisableItemByMenuItemIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusSectionListByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/section/list/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusSectionListByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusSectionListByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusSectionListByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusSectionGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/section/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusSectionGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusSectionGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusSectionGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusSectionCreatePost(create: MenuSectionCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/section/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusSectionCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusSectionCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusSectionCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusSectionUpdatePost(update: MenuSectionUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/section/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusSectionUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusSectionUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusSectionUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusSectionDiscardByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/section/discard/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusSectionDiscardByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusSectionDiscardByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusSectionDiscardByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusSectionProposeByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/section/propose/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusSectionProposeByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusSectionProposeByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusSectionProposeByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusSectionApproveByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/section/approve/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusSectionApproveByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusSectionApproveByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusSectionApproveByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusSectionDeclineByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/section/decline/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusSectionDeclineByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusSectionDeclineByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusSectionDeclineByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1MenusSectionConfirmByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/menus/section/confirm/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1MenusSectionConfirmByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1MenusSectionConfirmByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1MenusSectionConfirmByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1NotificationsOrderAlertsMutePost(request: OrderAlertMuteRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/notifications/order-alerts/mute";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1NotificationsOrderAlertsMutePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1NotificationsOrderAlertsMutePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1NotificationsOrderAlertsMutePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersListByUserIdGet(userId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/list/{userId}"; 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersListByUserIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersListByUserIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersListByUserIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersGetByIdGet(id: string): Observable<OrderResult> {
        let url_ = this.baseUrl + "/api/v1/orders/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersGetByIdGet(response));
                } catch (e) {
                    return <Observable<OrderResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrderResult>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
            let result200: OrderResult = null; 
            result200 = data === "" ? null : <OrderResult>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersListRestaurantOrdersByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/list-restaurant-orders/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersListRestaurantOrdersByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersListRestaurantOrdersByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersListRestaurantOrdersByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersListRestaurantByRestaurantIdGet(restaurantId: string): Observable<OrderResultV2[]> {
        let url_ = this.baseUrl + "/api/v1/orders/list-restaurant/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersListRestaurantByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersListRestaurantByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<OrderResultV2[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrderResultV2[]>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersListRestaurantByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
            let result200: OrderResultV2[] = null; 
            result200 = data === "" ? null : <OrderResultV2[]>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersListActiveGet(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/list-active";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersListActiveGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersListActiveGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersListActiveGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersListActiveV2Get(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/list-active-v2";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersListActiveV2Get(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersListActiveV2Get(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersListActiveV2Get(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersCreatePost(create: OrderCreate): Observable<OrderResult> {
        let url_ = this.baseUrl + "/api/v1/orders/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersCreatePost(response));
                } catch (e) {
                    return <Observable<OrderResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<OrderResult>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
            let result200: OrderResult = null; 
            result200 = data === "" ? null : <OrderResult>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersDeleteByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/delete/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersDeleteByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersDeleteByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersDeleteByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersItemsListByOrderIdGet(orderId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/items/list/{orderId}"; 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersItemsListByOrderIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersItemsListByOrderIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersItemsListByOrderIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersItemsGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/items/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersItemsGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersItemsGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersItemsGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersItemsCreatePost(create: OrderItemCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/items/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersItemsCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersItemsCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersItemsCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersItemsUpdatePost(update: OrderItemUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/items/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersItemsUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersItemsUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersItemsUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersItemsDeleteByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/items/delete/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersItemsDeleteByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersItemsDeleteByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersItemsDeleteByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersProcessingPlaceOrderPost(request: OrderPlacementRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/processing/place-order";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersProcessingPlaceOrderPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersProcessingPlaceOrderPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersProcessingPlaceOrderPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersProcessingValidateOrderPlaceableByOrderIdPost(orderId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/processing/validate-order-placeable/{orderId}"; 
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersProcessingValidateOrderPlaceableByOrderIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersProcessingValidateOrderPlaceableByOrderIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersProcessingValidateOrderPlaceableByOrderIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersProcessingAcceptOrderPost(request: OrderAcceptanceRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/processing/accept-order";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersProcessingAcceptOrderPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersProcessingAcceptOrderPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersProcessingAcceptOrderPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersProcessingRejectOrderPost(request: OrderRejectionRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/processing/reject-order";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersProcessingRejectOrderPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersProcessingRejectOrderPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersProcessingRejectOrderPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1OrdersProcessingProduceOrderPost(request: OrderProductionRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/orders/processing/produce-order";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1OrdersProcessingProduceOrderPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1OrdersProcessingProduceOrderPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1OrdersProcessingProduceOrderPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsListGet(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/list";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsListGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsListGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsListGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsGetBySlugBySlugGet(slug: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/get-by-slug/{slug}"; 
        if (slug === undefined || slug === null)
            throw new Error("The parameter 'slug' must be defined.");
        url_ = url_.replace("{slug}", encodeURIComponent("" + slug));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsGetBySlugBySlugGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsGetBySlugBySlugGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsGetBySlugBySlugGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsCreatePost(create: RestaurantCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsUpdatePost(update: RestaurantUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsGetDashboardBySlugGet(slug: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/get-dashboard-by-slug?"; 
        if (slug !== undefined)
            url_ += "slug=" + encodeURIComponent("" + slug) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsGetDashboardBySlugGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsGetDashboardBySlugGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsGetDashboardBySlugGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsAvailabilityGetByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/availability/get/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsAvailabilityGetByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsAvailabilityGetByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsAvailabilityGetByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsAvailabilityGetPublicByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/availability/get-public/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsAvailabilityGetPublicByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsAvailabilityGetPublicByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsAvailabilityGetPublicByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsAvailabilityGetUnavailabilityStatusesByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/availability/get-unavailability-statuses/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsAvailabilityGetUnavailabilityStatusesByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsAvailabilityGetUnavailabilityStatusesByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsAvailabilityGetUnavailabilityStatusesByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsCategoriesListByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/categories/list/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsCategoriesListByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsCategoriesListByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsCategoriesListByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsCategoriesGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/categories/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsCategoriesGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsCategoriesGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsCategoriesGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsCategoriesCreatePost(create: RestaurantCategoryCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/categories/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsCategoriesCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsCategoriesCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsCategoriesCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsCategoriesDeleteByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/categories/delete/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsCategoriesDeleteByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsCategoriesDeleteByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsCategoriesDeleteByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientGetByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/client/get/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsClientGetByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsClientGetByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsClientGetByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientEnableWebByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/client/enable-web/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsClientEnableWebByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsClientEnableWebByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsClientEnableWebByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientDisableWebByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/client/disable-web/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsClientDisableWebByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsClientDisableWebByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsClientDisableWebByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientCreateSmsClientPost(create: RestaurantSmsClientCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/client/create-sms-client";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsClientCreateSmsClientPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsClientCreateSmsClientPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsClientCreateSmsClientPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientDeleteSmsClientBySmsClientIdPost(smsClientId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/client/delete-sms-client/{smsClientId}"; 
        if (smsClientId === undefined || smsClientId === null)
            throw new Error("The parameter 'smsClientId' must be defined.");
        url_ = url_.replace("{smsClientId}", encodeURIComponent("" + smsClientId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsClientDeleteSmsClientBySmsClientIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsClientDeleteSmsClientBySmsClientIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsClientDeleteSmsClientBySmsClientIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientActivateSmsClientBySmsClientIdPost(smsClientId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/client/activate-sms-client/{smsClientId}"; 
        if (smsClientId === undefined || smsClientId === null)
            throw new Error("The parameter 'smsClientId' must be defined.");
        url_ = url_.replace("{smsClientId}", encodeURIComponent("" + smsClientId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsClientActivateSmsClientBySmsClientIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsClientActivateSmsClientBySmsClientIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsClientActivateSmsClientBySmsClientIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientDeactivateSmsClientBySmsClientIdPost(smsClientId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/client/deactivate-sms-client/{smsClientId}"; 
        if (smsClientId === undefined || smsClientId === null)
            throw new Error("The parameter 'smsClientId' must be defined.");
        url_ = url_.replace("{smsClientId}", encodeURIComponent("" + smsClientId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsClientDeactivateSmsClientBySmsClientIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsClientDeactivateSmsClientBySmsClientIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsClientDeactivateSmsClientBySmsClientIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientPromoteSmsClientBySmsClientIdPost(smsClientId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/client/promote-sms-client/{smsClientId}"; 
        if (smsClientId === undefined || smsClientId === null)
            throw new Error("The parameter 'smsClientId' must be defined.");
        url_ = url_.replace("{smsClientId}", encodeURIComponent("" + smsClientId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsClientPromoteSmsClientBySmsClientIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsClientPromoteSmsClientBySmsClientIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsClientPromoteSmsClientBySmsClientIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientRemovePromotedSmsClientByRestaurantIdPost(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/client/remove-promoted-sms-client/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsClientRemovePromotedSmsClientByRestaurantIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsClientRemovePromotedSmsClientByRestaurantIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsClientRemovePromotedSmsClientByRestaurantIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsClientTestSmsClientBySmsClientIdPost(smsClientId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/client/test-sms-client/{smsClientId}"; 
        if (smsClientId === undefined || smsClientId === null)
            throw new Error("The parameter 'smsClientId' must be defined.");
        url_ = url_.replace("{smsClientId}", encodeURIComponent("" + smsClientId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsClientTestSmsClientBySmsClientIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsClientTestSmsClientBySmsClientIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsClientTestSmsClientBySmsClientIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsHeartbeatPost(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/heartbeat";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsHeartbeatPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsHeartbeatPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsHeartbeatPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsHeartbeatByRestaurantIdPost(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/heartbeat/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsHeartbeatByRestaurantIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsHeartbeatByRestaurantIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsHeartbeatByRestaurantIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsHeartbeatGetByRestaurantIdPost(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/heartbeat/get/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsHeartbeatGetByRestaurantIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsHeartbeatGetByRestaurantIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsHeartbeatGetByRestaurantIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsHeartbeatSetPost(update: RestaurantHeartbeatModeUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/heartbeat/set";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsHeartbeatSetPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsHeartbeatSetPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsHeartbeatSetPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsImagesUploadLogoImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/images/upload-logo-image?"; 
        if (entityId !== undefined)
            url_ += "EntityId=" + encodeURIComponent("" + entityId) + "&"; 
        if (image_ContentType !== undefined)
            url_ += "Image.ContentType=" + encodeURIComponent("" + image_ContentType) + "&"; 
        if (image_ContentDisposition !== undefined)
            url_ += "Image.ContentDisposition=" + encodeURIComponent("" + image_ContentDisposition) + "&"; 
        if (image_Headers !== undefined)
            url_ += "Image.Headers=" + encodeURIComponent("" + image_Headers) + "&"; 
        if (image_Length !== undefined)
            url_ += "Image.Length=" + encodeURIComponent("" + image_Length) + "&"; 
        if (image_Name !== undefined)
            url_ += "Image.Name=" + encodeURIComponent("" + image_Name) + "&"; 
        if (image_FileName !== undefined)
            url_ += "Image.FileName=" + encodeURIComponent("" + image_FileName) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsImagesUploadLogoImagePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsImagesUploadLogoImagePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsImagesUploadLogoImagePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsImagesUploadSearchImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/images/upload-search-image?"; 
        if (entityId !== undefined)
            url_ += "EntityId=" + encodeURIComponent("" + entityId) + "&"; 
        if (image_ContentType !== undefined)
            url_ += "Image.ContentType=" + encodeURIComponent("" + image_ContentType) + "&"; 
        if (image_ContentDisposition !== undefined)
            url_ += "Image.ContentDisposition=" + encodeURIComponent("" + image_ContentDisposition) + "&"; 
        if (image_Headers !== undefined)
            url_ += "Image.Headers=" + encodeURIComponent("" + image_Headers) + "&"; 
        if (image_Length !== undefined)
            url_ += "Image.Length=" + encodeURIComponent("" + image_Length) + "&"; 
        if (image_Name !== undefined)
            url_ += "Image.Name=" + encodeURIComponent("" + image_Name) + "&"; 
        if (image_FileName !== undefined)
            url_ += "Image.FileName=" + encodeURIComponent("" + image_FileName) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsImagesUploadSearchImagePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsImagesUploadSearchImagePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsImagesUploadSearchImagePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsImagesUploadFeaturedImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/images/upload-featured-image?"; 
        if (entityId !== undefined)
            url_ += "EntityId=" + encodeURIComponent("" + entityId) + "&"; 
        if (image_ContentType !== undefined)
            url_ += "Image.ContentType=" + encodeURIComponent("" + image_ContentType) + "&"; 
        if (image_ContentDisposition !== undefined)
            url_ += "Image.ContentDisposition=" + encodeURIComponent("" + image_ContentDisposition) + "&"; 
        if (image_Headers !== undefined)
            url_ += "Image.Headers=" + encodeURIComponent("" + image_Headers) + "&"; 
        if (image_Length !== undefined)
            url_ += "Image.Length=" + encodeURIComponent("" + image_Length) + "&"; 
        if (image_Name !== undefined)
            url_ += "Image.Name=" + encodeURIComponent("" + image_Name) + "&"; 
        if (image_FileName !== undefined)
            url_ += "Image.FileName=" + encodeURIComponent("" + image_FileName) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsImagesUploadFeaturedImagePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsImagesUploadFeaturedImagePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsImagesUploadFeaturedImagePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsImagesUploadLocationImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/images/upload-location-image?"; 
        if (entityId !== undefined)
            url_ += "EntityId=" + encodeURIComponent("" + entityId) + "&"; 
        if (image_ContentType !== undefined)
            url_ += "Image.ContentType=" + encodeURIComponent("" + image_ContentType) + "&"; 
        if (image_ContentDisposition !== undefined)
            url_ += "Image.ContentDisposition=" + encodeURIComponent("" + image_ContentDisposition) + "&"; 
        if (image_Headers !== undefined)
            url_ += "Image.Headers=" + encodeURIComponent("" + image_Headers) + "&"; 
        if (image_Length !== undefined)
            url_ += "Image.Length=" + encodeURIComponent("" + image_Length) + "&"; 
        if (image_Name !== undefined)
            url_ += "Image.Name=" + encodeURIComponent("" + image_Name) + "&"; 
        if (image_FileName !== undefined)
            url_ += "Image.FileName=" + encodeURIComponent("" + image_FileName) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsImagesUploadLocationImagePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsImagesUploadLocationImagePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsImagesUploadLocationImagePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsImagesDeleteLogoImageByRestaurantIdPost(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/images/delete-logo-image/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsImagesDeleteLogoImageByRestaurantIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsImagesDeleteLogoImageByRestaurantIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsImagesDeleteLogoImageByRestaurantIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsImagesDeleteSearchImageByRestaurantIdPost(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/images/delete-search-image/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsImagesDeleteSearchImageByRestaurantIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsImagesDeleteSearchImageByRestaurantIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsImagesDeleteSearchImageByRestaurantIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsImagesDeleteFeaturedImageByRestaurantIdPost(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/images/delete-featured-image/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsImagesDeleteFeaturedImageByRestaurantIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsImagesDeleteFeaturedImageByRestaurantIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsImagesDeleteFeaturedImageByRestaurantIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsImagesDeleteLocationImageByRestaurantIdPost(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/images/delete-location-image/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsImagesDeleteLocationImageByRestaurantIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsImagesDeleteLocationImageByRestaurantIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsImagesDeleteLocationImageByRestaurantIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsRegistrationInvitePost(create: RestaurantManagerInvitationCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/registration/invite";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsRegistrationInvitePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsRegistrationInvitePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsRegistrationInvitePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsRegistrationGetInvitationByRestaurantByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/registration/get-invitation-by-restaurant/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsRegistrationGetInvitationByRestaurantByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsRegistrationGetInvitationByRestaurantByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsRegistrationGetInvitationByRestaurantByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsRegistrationRegisterPost(request: RestaurantRegistrationRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/registration/register";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsRegistrationRegisterPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsRegistrationRegisterPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsRegistrationRegisterPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsOrderGetByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/order/get/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsOrderGetByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsOrderGetByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsOrderGetByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsOrderOrderValuesUpdatePost(update: RestaurantOrderValueUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/order/order-values/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsOrderOrderValuesUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsOrderOrderValuesUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsOrderOrderValuesUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsOrderOrderRateLimitUpdatePost(update: RestaurantOrderRateLimitUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/order/order-rate-limit/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsOrderOrderRateLimitUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsOrderOrderRateLimitUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsOrderOrderRateLimitUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsOrderOrderRateLimitSelectPost(selection: RestaurantOrderRateLimitSelection): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/order/order-rate-limit/select";

        const content_ = JSON.stringify(selection);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsOrderOrderRateLimitSelectPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsOrderOrderRateLimitSelectPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsOrderOrderRateLimitSelectPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsOrderOrderRateLimitRemoveByRestaurantIdPost(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/order/order-rate-limit/remove/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsOrderOrderRateLimitRemoveByRestaurantIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsOrderOrderRateLimitRemoveByRestaurantIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsOrderOrderRateLimitRemoveByRestaurantIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSearchSearchPost(request: RestaurantSearchRequest): Observable<RestaurantSearchResult> {
        let url_ = this.baseUrl + "/api/v1/restaurants/search/search";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSearchSearchPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSearchSearchPost(response));
                } catch (e) {
                    return <Observable<RestaurantSearchResult>><any>Observable.throw(e);
                }
            } else
                return <Observable<RestaurantSearchResult>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSearchSearchPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
            let result200: RestaurantSearchResult = null; 
            result200 = data === "" ? null : <RestaurantSearchResult>JSON.parse(data, this.jsonParseReviver);
            return result200; 
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSearchGetRestaurantSearchResultPost(request: RestaurantSearchItemRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/search/get-restaurant-search-result";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSearchGetRestaurantSearchResultPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSearchGetRestaurantSearchResultPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSearchGetRestaurantSearchResultPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsGetByRestaurantIdGet(restaurantId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/get/{restaurantId}"; 
        if (restaurantId === undefined || restaurantId === null)
            throw new Error("The parameter 'restaurantId' must be defined.");
        url_ = url_.replace("{restaurantId}", encodeURIComponent("" + restaurantId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsGetByRestaurantIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsGetByRestaurantIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsGetByRestaurantIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsUpdateDeliveriesPost(update: RestaurantDeliverySettingsUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/update-deliveries";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsUpdateDeliveriesPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsUpdateDeliveriesPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsUpdateDeliveriesPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1RestaurantsSettingsUpdateSchedulesPost(update: RestaurantScheduleSettingsUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/restaurants/settings/update-schedules";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1RestaurantsSettingsUpdateSchedulesPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1RestaurantsSettingsUpdateSchedulesPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1RestaurantsSettingsUpdateSchedulesPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1AccountRolesAddPost(addition: RoleAddition): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/account/roles/add";

        const content_ = JSON.stringify(addition);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1AccountRolesAddPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1AccountRolesAddPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1AccountRolesAddPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1AccountRolesRemovePost(removal: RoleRemoval): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/account/roles/remove";

        const content_ = JSON.stringify(removal);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1AccountRolesRemovePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1AccountRolesRemovePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1AccountRolesRemovePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1AccountSessionLoginPost(request: LoginRequest): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/account/session/login";

        const content_ = JSON.stringify(request);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1AccountSessionLoginPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1AccountSessionLoginPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1AccountSessionLoginPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1AccountSessionLogoutPost(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/account/session/logout";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1AccountSessionLogoutPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1AccountSessionLogoutPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1AccountSessionLogoutPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1PaymentStripeCardsCreatePost(create: StripeCardCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/payment/stripe/cards/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1PaymentStripeCardsCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1PaymentStripeCardsCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1PaymentStripeCardsCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1PaymentStripeCardsListByUserIdGet(userId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/payment/stripe/cards/list/{userId}"; 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1PaymentStripeCardsListByUserIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1PaymentStripeCardsListByUserIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1PaymentStripeCardsListByUserIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1PaymentStripeCardsDeleteByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/payment/stripe/cards/delete/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1PaymentStripeCardsDeleteByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1PaymentStripeCardsDeleteByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1PaymentStripeCardsDeleteByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1PaymentStripeCustomersGetByUserIdGet(userId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/payment/stripe/customers/get/{userId}"; 
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1PaymentStripeCustomersGetByUserIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1PaymentStripeCustomersGetByUserIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1PaymentStripeCustomersGetByUserIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1PaymentStripeCustomersCreatePost(create: StripeCustomerCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/payment/stripe/customers/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1PaymentStripeCustomersCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1PaymentStripeCustomersCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1PaymentStripeCustomersCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsTownsListGet(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/towns/list";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsTownsListGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsTownsListGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsTownsListGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsTownsListAdministratorGet(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/towns/list-administrator";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsTownsListAdministratorGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsTownsListAdministratorGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsTownsListAdministratorGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsTownsGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/towns/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsTownsGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsTownsGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsTownsGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsTownsGetDetailsByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/towns/get-details/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsTownsGetDetailsByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsTownsGetDetailsByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsTownsGetDetailsByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsTownsCreatePost(create: TownCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/towns/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsTownsCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsTownsCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsTownsCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsTownsUpdatePost(update: TownUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/towns/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsTownsUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsTownsUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsTownsUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsDistrictsListByTownIdGet(townId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/districts/list/{townId}"; 
        if (townId === undefined || townId === null)
            throw new Error("The parameter 'townId' must be defined.");
        url_ = url_.replace("{townId}", encodeURIComponent("" + townId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsDistrictsListByTownIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsDistrictsListByTownIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsDistrictsListByTownIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsDistrictsGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/districts/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsDistrictsGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsDistrictsGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsDistrictsGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsDistrictsCreatePost(create: TownDistrictCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/districts/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsDistrictsCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsDistrictsCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsDistrictsCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsDistrictsUpdatePost(update: TownDistrictUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/districts/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsDistrictsUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsDistrictsUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsDistrictsUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSuburbsListByTownIdGet(townId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/suburbs/list/{townId}"; 
        if (townId === undefined || townId === null)
            throw new Error("The parameter 'townId' must be defined.");
        url_ = url_.replace("{townId}", encodeURIComponent("" + townId));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSuburbsListByTownIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSuburbsListByTownIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSuburbsListByTownIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSuburbsGetByIdGet(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/suburbs/get/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSuburbsGetByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSuburbsGetByIdGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSuburbsGetByIdGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSuburbsRandomGet(): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/suburbs/random";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSuburbsRandomGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSuburbsRandomGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSuburbsRandomGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSuburbsRandomByCountGet(count: number): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/suburbs/random/{count}"; 
        if (count === undefined || count === null)
            throw new Error("The parameter 'count' must be defined.");
        url_ = url_.replace("{count}", encodeURIComponent("" + count));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSuburbsRandomByCountGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSuburbsRandomByCountGet(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSuburbsRandomByCountGet(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSuburbsCreatePost(create: TownSuburbCreate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/suburbs/create";

        const content_ = JSON.stringify(create);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSuburbsCreatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSuburbsCreatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSuburbsCreatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSuburbsUpdatePost(update: TownSuburbUpdate): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/suburbs/update";

        const content_ = JSON.stringify(update);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSuburbsUpdatePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSuburbsUpdatePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSuburbsUpdatePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSuburbsUploadImagePost(entityId: string, image_ContentType: string, image_ContentDisposition: string, image_Headers: any, image_Length: number, image_Name: string, image_FileName: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/suburbs/upload-image?"; 
        if (entityId !== undefined)
            url_ += "EntityId=" + encodeURIComponent("" + entityId) + "&"; 
        if (image_ContentType !== undefined)
            url_ += "Image.ContentType=" + encodeURIComponent("" + image_ContentType) + "&"; 
        if (image_ContentDisposition !== undefined)
            url_ += "Image.ContentDisposition=" + encodeURIComponent("" + image_ContentDisposition) + "&"; 
        if (image_Headers !== undefined)
            url_ += "Image.Headers=" + encodeURIComponent("" + image_Headers) + "&"; 
        if (image_Length !== undefined)
            url_ += "Image.Length=" + encodeURIComponent("" + image_Length) + "&"; 
        if (image_Name !== undefined)
            url_ += "Image.Name=" + encodeURIComponent("" + image_Name) + "&"; 
        if (image_FileName !== undefined)
            url_ += "Image.FileName=" + encodeURIComponent("" + image_FileName) + "&";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSuburbsUploadImagePost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSuburbsUploadImagePost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSuburbsUploadImagePost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }

    /**
     * @return Success
     */
    apiV1LocationsSuburbsDeleteImageByIdPost(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v1/locations/suburbs/delete-image/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiV1LocationsSuburbsDeleteImageByIdPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiV1LocationsSuburbsDeleteImageByIdPost(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    private processApiV1LocationsSuburbsDeleteImageByIdPost(response: Response) {
        const data = response.text();
        const status = response.status.toString(); 

        if (status === "200") {
        }
        else
        {
            throw new Error("error_no_callback_for_the_received_http_status"); 
        }
    }
}

export interface UserUpdate {
    id?: string;
    phoneNumber?: string;
    firstName?: string;
    lastName?: string;
}

export interface PasswordUpdate {
    id?: string;
    currentPassword?: string;
    password?: string;
    confirmPassword?: string;
}

export interface CustomerLocationSubscriptionCreate {
    userId?: string;
    postcode?: string;
}

export interface CustomerLocationAnonymousSubscriptionCreate {
    email?: string;
    postcode?: string;
}

export interface CustomerPostalAddressCreate {
    customerId?: string;
    postalAddressId?: string;
}

export interface CustomerRegistrationRequest {
    firstName?: string;
    lastName?: string;
    email?: string;
    phoneNumber?: string;
    password?: string;
    orderId?: string;
}

export interface DeliveryAssignRequest {
    orderId?: string;
    deliveryPartnerName?: string;
}

export interface DeliveryAllocationCreate {
    orderId?: string;
    expectedRestaurantArrivalTime?: Date;
    notes?: string;
}

export interface DeliveryRestaurantArrivalCreate {
    orderId?: string;
    restaurantArrivalTime?: Date;
    notes?: string;
}

export interface DeliveryDispatchmentCreate {
    orderId?: string;
    expectedCustomerArrivalTime?: Date;
    notes?: string;
}

export interface DeliveryCustomerArrivalCreate {
    orderId?: string;
    customerArrivalTime?: Date;
    notes?: string;
}

export interface DeliveryCompletionCreate {
    orderId?: string;
    completedTime?: Date;
    notes?: string;
}

export interface RestaurantRegisterInterestCreate {
    email?: string;
    phone?: string;
    town: string;
    postcode?: string;
    notes?: string;
}

export interface CustomerRegisterInterestCreate {
    email?: string;
    town?: string;
    postcode?: string;
    notes?: string;
}

export interface LocationResult {
    status?: LocationResultStatus;
    town?: PublicTownResult;
    district?: TownDistrictResult;
    suburb?: TownSuburbResult;
    postcode?: string;
    position?: Position;
    imageUrl?: string;
    readonly normalizedPostcode?: string;
}

export interface PublicTownResult {
    id?: string;
    name?: string;
    slug?: string;
    deliveryShiftStarts?: Date;
    deliveryShiftEnds?: Date;
    readonly hasShift?: boolean;
}

export interface TownDistrictResult {
    suburbs?: TownSuburbResult[];
    id?: string;
    name?: string;
    imageUrl?: string;
    latitude?: number;
    longitude?: number;
    radiusKilometers?: number;
    townId?: string;
    updatedById?: string;
}

export interface TownSuburbResult {
    townSlug?: string;
    townName?: string;
    id?: string;
    name?: string;
    imageUrl?: string;
    latitude?: number;
    longitude?: number;
    radiusKilometers?: number;
    townId?: string;
    postcode?: string;
    isFeatured?: boolean;
}

export interface Position {
    latitude?: number;
    longitude?: number;
}

export interface LocationClosureUpdate {
    locationId?: string;
    closedUntil?: Date;
    closureType?: LocationClosureUpdateClosureType;
    customClosureReason?: string;
}

export interface LocationShiftCreate {
    locationId?: string;
    shiftType?: LocationShiftCreateShiftType;
    scheduleSettingsId?: string;
    timeWindowId?: string;
    timeWindow?: TimeWindowCreate;
}

export interface TimeWindowCreate {
    readonly start?: string;
    readonly end?: string;
    dayOfWeek?: TimeWindowCreateDayOfWeek;
    startHour?: number;
    startMinute?: number;
    endHour?: number;
    endMinute?: number;
}

export interface LocationShiftUpdate {
    locationId?: string;
    id?: string;
    shiftType?: LocationShiftUpdateShiftType;
    scheduleSettingsId?: string;
    timeWindowId?: string;
    timeWindow?: TimeWindowUpdate;
}

export interface TimeWindowUpdate {
    readonly start?: string;
    readonly end?: string;
    id?: string;
    dayOfWeek?: TimeWindowUpdateDayOfWeek;
    startHour?: number;
    startMinute?: number;
    endHour?: number;
    endMinute?: number;
}

export interface MenuSectionSelectionCreate {
    order?: number;
    isEnabled?: boolean;
    menuId?: string;
    sectionDetailsId?: string;
}

export interface MenuItemSelectionCreate {
    order?: number;
    isEnabled?: boolean;
    isFeatured?: boolean;
    sectionId?: string;
    itemDetailsId?: string;
}

export interface MenuOptionSelectionCreate {
    order?: number;
    isEnabled?: boolean;
    itemId?: string;
    optionDetailsId?: string;
}

export interface MenuOrderRequest {
    parentId?: string;
    orderIdTuples?: OrderIdTuple[];
}

export interface OrderIdTuple {
    id?: string;
    order?: number;
}

export interface MenuItemCreate {
    baseComponentId?: string;
    name: string;
    description?: string;
    price: number;
    imageUrl?: string;
    isEnabled?: boolean;
    shortCode: string;
    restaurantId?: string;
}

export interface MenuItemUpdate {
    name?: string;
    description?: string;
    price?: number;
    imageUrl?: string;
    id?: string;
    shortCode?: string;
}

export interface MenuCreate {
    baseMenuId?: string;
    restaurantId?: string;
}

export interface MenuSectionCreate {
    baseComponentId?: string;
    name?: string;
    description?: string;
    restaurantId?: string;
}

export interface MenuSectionUpdate {
    id?: string;
    name?: string;
    description?: string;
    imageUrl?: string;
}

export interface OrderAlertMuteRequest {
    orderId?: string;
    deliveryId?: string;
    orderStatus?: OrderAlertMuteRequestOrderStatus;
    deliveryStatus?: OrderAlertMuteRequestDeliveryStatus;
    deliveryIntegrationStatus?: OrderAlertMuteRequestDeliveryIntegrationStatus;
}

export interface OrderResult {
    friendlyId?: string;
    expectedDeliveryTime?: Date;
    userId?: string;
    value?: number;
    user?: UserResult;
    hasError?: boolean;
    items?: OrderItemResult[];
    postalAddress?: PostalAddressResult;
    status?: OrderResultStatus;
    audits?: OrderAuditResult;
    targetDelivery?: Date;
    targetPickUp?: Date;
    expires?: Date;
    lastAudit?: Date;
    restaurant?: RestaurantResult;
    id?: string;
    outcome?: OrderResultOutcome;
    restaurantId?: string;
    created?: Date;
}

export interface UserResult {
    id?: string;
    email?: string;
    phoneNumber?: string;
    userName?: string;
    displayName?: string;
    firstName?: string;
    lastName?: string;
    roles?: string[];
    restaurantId?: string;
}

export interface OrderItemResult {
    options?: OrderItemOptionResult[];
    excludedOptions?: OrderItemOptionResult[];
    id?: string;
    count?: number;
    menuItemId?: string;
    menuItem?: MenuItemResult;
    orderId?: string;
}

export interface PostalAddressResult {
    format?: string;
    id?: string;
    company?: string;
    line1?: string;
    line2?: string;
    postcode?: string;
    latitude?: number;
    longitude?: number;
    instructions?: string;
    nearestLandmark?: string;
}

export interface OrderAuditResult {
    placed?: Date;
    accepted?: Date;
    rejected?: Date;
    produced?: Date;
    pickedUp?: Date;
    delivered?: Date;
}

export interface RestaurantResult {
    minimumOrderValue?: number;
    maximumOrderValue?: number;
    manager?: UserResult;
    menu?: CustomerMenuResult;
    categories?: RestaurantCategoryResult[];
    scheduleDeprecated?: RestaurantOpeningWindow[];
    contactPhoneNumber?: string;
    town?: PublicTownResult;
    deliveries?: PublicRestaurantDeliveryRangeSettingsResult;
    schedule?: PublicRestaurantScheduleSettingsResult;
    isPreview?: boolean;
    id?: string;
    name?: string;
    branch?: string;
    description?: string;
    defaultContactPhoneNumber?: string;
    slug?: string;
    veganType?: RestaurantResultVeganType;
    timeZoneId?: string;
    status?: RestaurantResultStatus;
    postalAddressId?: string;
    postalAddress?: PostalAddressResult;
    townId?: string;
    images?: RestaurantImagesResult;
}

export interface OrderItemOptionResult {
    id?: string;
    orderItemId?: string;
    menuOptionId?: string;
    menuOption?: MenuOptionResult;
    menuOptionValueId?: string;
    menuOptionValue?: MenuOptionValueResult;
}

export interface MenuItemResult {
    name?: string;
    description?: string;
    price?: number;
    imageUrl?: string;
    isEnabled?: boolean;
    shortCode?: string;
    id?: string;
    restaurantId?: string;
}

export interface CustomerMenuResult {
    id?: string;
    restaurantId?: string;
    sections?: CustomerMenuSectionResult[];
    featuredSection?: CustomerMenuSectionResult;
}

export interface RestaurantCategoryResult {
    id?: string;
    name?: string;
    restaurantId?: string;
}

export interface RestaurantOpeningWindow {
    opens?: Date;
    closes?: Date;
}

export interface PublicRestaurantDeliveryRangeSettingsResult {
    deliveryRadiusMiles?: number;
    deliveryPostcodes?: string[];
}

export interface PublicRestaurantScheduleSettingsResult {
    opens?: Date;
    closes?: Date;
    readonly hasValidSchedule?: boolean;
}

export interface RestaurantImagesResult {
    id?: string;
    logoImageUrl?: string;
    searchImageUrl?: string;
    featuredImageUrl?: string;
    locationImageUrl?: string;
}

export interface MenuOptionResult {
    values?: MenuOptionValueResult[];
    name?: string;
    description?: string;
    minimumSelections?: number;
    maximumSelections?: number;
    id?: string;
    restaurantId?: string;
    discarded?: Date;
    discardedBy?: UserResult;
    discardedById?: string;
    confirmed?: Date;
    confirmedBy?: UserResult;
    confirmedById?: string;
}

export interface MenuOptionValueResult {
    id?: string;
    optionId?: string;
    name?: string;
    price?: number;
    shortCode?: string;
    defaultIsSelected?: boolean;
}

export interface CustomerMenuSectionResult {
    name?: string;
    description?: string;
    slug?: string;
    isEnabled?: boolean;
    menuId?: string;
    items?: CustomerMenuItemResult[];
    id?: string;
    restaurantId?: string;
    order?: number;
}

export interface CustomerMenuItemResult {
    name?: string;
    description?: string;
    price?: number;
    imageUrl?: string;
    isEnabled?: boolean;
    isFeatured?: boolean;
    options?: CustomerMenuOptionResult[];
    id?: string;
    restaurantId?: string;
    order?: number;
}

export interface CustomerMenuOptionResult {
    name?: string;
    description?: string;
    minimumSelections?: number;
    maximumSelections?: number;
    isEnabled?: boolean;
    values?: MenuOptionValueResult[];
    id?: string;
    restaurantId?: string;
    order?: number;
}

export interface OrderResultV2 {
    id?: string;
    timestamp?: Date;
    friendlyId?: string;
    status?: OrderResultV2Status;
    hasError?: boolean;
    value?: number;
    outcome?: OrderResultV2Outcome;
    restaurantId?: string;
    restaurant?: RestaurantResultV1_1;
    customerId?: string;
    customer?: CustomerOrderResult;
    items?: OrderItemResultV1_1[];
    audits?: OrderAuditResult;
    delivery?: DeliveryResult;
}

export interface RestaurantResultV1_1 {
    id?: string;
    name?: string;
    branch?: string;
    phoneNumber?: string;
    address?: PostalAddressResult;
    useSmsClient?: boolean;
    isPreview?: boolean;
}

export interface CustomerOrderResult {
    id?: string;
    firstName?: string;
    lastName?: string;
    displayName?: string;
    email?: string;
    phoneNumber?: string;
    address?: PostalAddressResult;
}

export interface OrderItemResultV1_1 {
    name?: string;
    count?: number;
    price?: number;
    options?: string[];
    excludedOptions?: string[];
}

export interface DeliveryResult {
    townId?: string;
    status?: DeliveryResultStatus;
    serviceableDeliveryPartnerNames?: string[];
    targetPickUp?: Date;
    targetPickUpLocal?: Date;
    expectedPickUp?: Date;
    expectedPickUpLocal?: Date;
    order?: DeliveryOrderResult;
    restaurant?: DeliveryRestaurantResult;
    user?: DeliveryUserResult;
    deliveryPartnerName?: string;
    integrationStatus?: DeliveryResultIntegrationStatus;
    integration?: DeliveryIntegrationResult;
    id?: string;
    deliveryMode?: DeliveryResultDeliveryMode;
    allocation?: DeliveryAllocationResult;
    restaurantArrival?: DeliveryRestaurantArrivalResult;
    dispatchment?: DeliveryDispatchmentResult;
    customerArrival?: DeliveryCustomerArrivalResult;
    completion?: DeliveryCompletionResult;
}

export interface DeliveryOrderResult {
    id?: string;
    friendlyId?: number;
    status?: DeliveryOrderResultStatus;
    outcome?: DeliveryOrderResultOutcome;
}

export interface DeliveryRestaurantResult {
    id?: string;
    name?: string;
    branch?: string;
    phoneNumber?: string;
    address?: PostalAddressResult;
}

export interface DeliveryUserResult {
    id?: string;
    displayName?: string;
    phoneNumber?: string;
    address?: PostalAddressResult;
}

export interface DeliveryIntegrationResult {
    status?: DeliveryIntegrationResultStatus;
    id?: string;
    name?: string;
    deliveryPartnerIntegrationTypeName?: string;
    attempts?: number;
    created?: Date;
    received?: Date;
    previouslyAttempted?: Date;
    previousExceptionMessage?: string;
    previousExceptionStacktrace?: string;
}

export interface DeliveryAllocationResult {
    expectedRestaurantArrivalTime?: Date;
    notes?: string;
    allocated?: Date;
    allocatedByIntegration?: string;
}

export interface DeliveryRestaurantArrivalResult {
    notes?: string;
    arrived?: Date;
    arrivedByIntegration?: string;
}

export interface DeliveryDispatchmentResult {
    expectedCustomerArrivalTime?: Date;
    notes?: string;
    dispatched?: Date;
    dispatchedByIntegration?: string;
}

export interface DeliveryCustomerArrivalResult {
    notes?: string;
    arrived?: Date;
    arrivedByIntegration?: string;
}

export interface DeliveryCompletionResult {
    notes?: string;
    completed?: Date;
    completedByIntegration?: string;
}

export interface OrderCreate {
    restaurantId?: string;
}

export interface OrderItemCreate {
    options?: OrderItemOptionCreate[];
    excludedOptions?: OrderItemOptionExclusionCreate[];
    count?: number;
    menuItemId?: string;
    orderId?: string;
}

export interface OrderItemOptionCreate {
    orderItemId?: string;
    menuOptionId?: string;
    menuOptionValueId?: string;
}

export interface OrderItemOptionExclusionCreate {
    orderItemId?: string;
    menuOptionId?: string;
    menuOptionValueId?: string;
}

export interface OrderItemUpdate {
    options?: OrderItemOptionCreate[];
    excludedOptions?: OrderItemOptionExclusionCreate[];
    id?: string;
    count?: number;
}

export interface OrderPlacementRequest {
    orderId?: string;
    postalAddressId?: string;
    postalAddressCreate?: PostalAddressCreate;
    postalAddressUpdate?: PostalAddressUpdate;
    validateAddress?: boolean;
    paymentOptions?: any;
    targetDelivery?: Date;
}

export interface PostalAddressCreate {
    company?: string;
    line1: string;
    line2?: string;
    postcode: string;
    latitude?: number;
    longitude?: number;
    instructions?: string;
    nearestLandmark?: string;
}

export interface PostalAddressUpdate {
    id?: string;
    company?: string;
    line1?: string;
    line2?: string;
    postcode?: string;
    town?: string;
    latitude?: number;
    longitude?: number;
    instructions?: string;
    nearestLandmark?: string;
}

export interface OrderAcceptanceRequest {
    orderId?: string;
    useDeliveryService?: boolean;
    readyMinutes?: number;
}

export interface OrderRejectionRequest {
    orderId?: string;
    reasonV2?: OrderRejectionRequestReasonV2;
    reason?: string;
}

export interface OrderProductionRequest {
    orderId?: string;
}

export interface RestaurantCreate {
    image?: IFormFile;
    postalAddress?: PostalAddressCreate;
    id?: string;
    name?: string;
    branch?: string;
    description?: string;
    defaultContactPhoneNumber?: string;
    slug: string;
    veganType?: RestaurantCreateVeganType;
    status?: RestaurantCreateStatus;
    townId?: string;
}

export interface IFormFile {
    readonly contentType?: string;
    readonly contentDisposition?: string;
    readonly headers?: { [key: string] : string[]; };
    readonly length?: number;
    readonly name?: string;
    readonly fileName?: string;
}

export interface RestaurantUpdate {
    image?: IFormFile;
    postalAddress?: PostalAddressUpdate;
    id?: string;
    name?: string;
    branch?: string;
    description?: string;
    defaultContactPhoneNumber?: string;
    slug?: string;
    veganType?: RestaurantUpdateVeganType;
    status?: RestaurantUpdateStatus;
}

export interface RestaurantCategoryCreate {
    name?: string;
    restaurantId?: string;
}

export interface RestaurantSmsClientCreate {
    restaurantId?: string;
    phoneNumber?: string;
    isActive?: boolean;
}

export interface RestaurantHeartbeatModeUpdate {
    restaurantId?: string;
    heartbeatMode?: RestaurantHeartbeatModeUpdateHeartbeatMode;
}

export interface RestaurantManagerInvitationCreate {
    email?: string;
    restaurantId?: string;
}

export interface RestaurantRegistrationRequest {
    restaurantRegistrationId?: string;
    code?: string;
    email?: string;
    password?: string;
}

export interface RestaurantOrderValueUpdate {
    restaurantId?: string;
    minimumOrderValue?: number;
    maximumOrderValue?: number;
}

export interface RestaurantOrderRateLimitUpdate {
    id?: string;
    maximumOrders?: number;
    durationMinutes?: number;
}

export interface RestaurantOrderRateLimitSelection {
    restaurantId?: string;
    level?: RestaurantOrderRateLimitSelectionLevel;
}

export interface RestaurantSearchRequest {
    townId?: string;
    postcode?: string;
    latitude?: number;
    longitude?: number;
    readonly position?: Position;
}

export interface RestaurantSearchResult {
    availableRestaurants?: RestaurantSearchItemResult[];
    unavailableRestaurants?: RestaurantSearchItemResult[];
    outOfRangeRestaurants?: RestaurantSearchItemResult[];
    comingSoonRestaurants?: RestaurantSearchItemResult[];
    comingSoonOutOfRangeRestaurants?: RestaurantSearchItemResult[];
}

export interface RestaurantSearchItemResult {
    restaurant?: RestaurantResult;
    expectedOrderMinutes?: number;
    distanceMiles?: number;
    restaurantAvailabilityStatus?: RestaurantSearchItemResultRestaurantAvailabilityStatus;
    isInDeliveryRange?: boolean;
    hasPreviewAccess?: boolean;
}

export interface RestaurantSearchItemRequest {
    restaurantId?: string;
    postcode?: string;
    latitude?: number;
    longitude?: number;
    readonly position?: Position;
}

export interface RestaurantDeliverySettingsUpdate {
    restaurantId?: string;
    deliveryServiceUsage?: RestaurantDeliverySettingsUpdateDeliveryServiceUsage;
    typicalPreparationSpeed?: RestaurantDeliverySettingsUpdateTypicalPreparationSpeed;
    deliveryRadiusMiles?: number;
    deliveryPostcodes?: string;
}

export interface RestaurantScheduleSettingsUpdate {
    restaurantId?: string;
    days?: RestaurantDayScheduleUpdate[];
    heartbeatMode?: RestaurantScheduleSettingsUpdateHeartbeatMode;
}

export interface RestaurantDayScheduleUpdate {
    dayOfWeek?: RestaurantDayScheduleUpdateDayOfWeek;
    startHour?: number;
    startMinute?: number;
    endHour?: number;
    endMinute?: number;
    readonly start?: string;
    readonly end?: string;
    id?: string;
    isOpen?: boolean;
}

export interface RoleAddition {
    userId?: string;
    roleName?: string;
}

export interface RoleRemoval {
    userId?: string;
    roleName?: string;
}

export interface LoginRequest {
    email: string;
    password: string;
    orderId?: string;
}

export interface StripeCardCreate {
    userId?: string;
    token?: string;
}

export interface StripeCustomerCreate {
    userId?: string;
    token?: string;
}

export interface TownCreate {
    confirmPassword?: string;
    id?: string;
    name?: string;
    latitude?: number;
    longitude?: number;
    radiusKilometers?: number;
}

export interface TownUpdate {
    confirmName?: string;
    status?: TownUpdateStatus;
    id?: string;
    name?: string;
    latitude?: number;
    longitude?: number;
    radiusKilometers?: number;
}

export interface TownDistrictCreate {
    name?: string;
    imageUrl?: string;
    latitude?: number;
    longitude?: number;
    radiusKilometers?: number;
    townId?: string;
}

export interface TownDistrictUpdate {
    confirmName?: string;
    id?: string;
    name?: string;
    imageUrl?: string;
    latitude?: number;
    longitude?: number;
    radiusKilometers?: number;
}

export interface TownSuburbCreate {
    name?: string;
    imageUrl?: string;
    latitude?: number;
    longitude?: number;
    radiusKilometers?: number;
    townId?: string;
    districtId?: string;
    postcode?: string;
    isFeatured?: boolean;
}

export interface TownSuburbUpdate {
    confirmName?: string;
    id?: string;
    name?: string;
    imageUrl?: string;
    latitude?: number;
    longitude?: number;
    radiusKilometers?: number;
    postcode?: string;
    isFeatured?: boolean;
}

export enum LocationResultStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum LocationClosureUpdateClosureType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export enum LocationShiftCreateShiftType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum TimeWindowCreateDayOfWeek {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum LocationShiftUpdateShiftType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum TimeWindowUpdateDayOfWeek {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum OrderAlertMuteRequestOrderStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
    _7 = 7, 
    _8 = 8, 
}

export enum OrderAlertMuteRequestDeliveryStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
    _7 = 7, 
}

export enum OrderAlertMuteRequestDeliveryIntegrationStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum OrderResultStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
    _7 = 7, 
    _8 = 8, 
}

export enum OrderResultOutcome {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum RestaurantResultVeganType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RestaurantResultStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
}

export enum OrderResultV2Status {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
    _7 = 7, 
    _8 = 8, 
}

export enum OrderResultV2Outcome {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum DeliveryResultStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
    _7 = 7, 
}

export enum DeliveryResultIntegrationStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum DeliveryResultDeliveryMode {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}

export enum DeliveryOrderResultStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
    _7 = 7, 
    _8 = 8, 
}

export enum DeliveryOrderResultOutcome {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum DeliveryIntegrationResultStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum OrderRejectionRequestReasonV2 {
    _0 = 0, 
    _1 = 1, 
}

export enum RestaurantCreateVeganType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RestaurantCreateStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
}

export enum RestaurantUpdateVeganType {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RestaurantUpdateStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
}

export enum RestaurantHeartbeatModeUpdateHeartbeatMode {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RestaurantOrderRateLimitSelectionLevel {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RestaurantSearchItemResultRestaurantAvailabilityStatus {
    _0 = 0, 
    _1 = 1, 
    _3 = 3, 
    _5 = 5, 
    _11 = 11, 
    _19 = 19, 
    _35 = 35, 
    _67 = 67, 
    _131 = 131, 
    _259 = 259, 
    _547 = 547, 
    _579 = 579, 
    _1059 = 1059, 
}

export enum RestaurantDeliverySettingsUpdateDeliveryServiceUsage {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RestaurantDeliverySettingsUpdateTypicalPreparationSpeed {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
}

export enum RestaurantScheduleSettingsUpdateHeartbeatMode {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
}

export enum RestaurantDayScheduleUpdateDayOfWeek {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
    _3 = 3, 
    _4 = 4, 
    _5 = 5, 
    _6 = 6, 
}

export enum TownUpdateStatus {
    _0 = 0, 
    _1 = 1, 
    _2 = 2, 
}